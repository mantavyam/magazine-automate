from google.colab import drive
import docx
import os

def mount_drive():
    """Mount Google Drive and return the mount point."""
    drive.mount('/content/drive')
    return '/content/drive/MyDrive/'

def number_questions(doc_path):
    """
    Add sequential numbering to questions starting with 'Q.'
    Returns the path of the new numbered document.
    """
    # Load the document
    doc = docx.Document(doc_path)
    question_count = 0
    
    # Process each paragraph
    for paragraph in doc.paragraphs:
        if paragraph.text.strip().startswith('Q.'):
            question_count += 1
            # Get the text after 'Q.' and preserve any existing formatting
            original_text = paragraph.text[2:].strip()  # Remove 'Q.' and any immediate spaces
            
            # Clear the paragraph
            paragraph.clear()
            
            # Add the new numbered question format
            run = paragraph.add_run(f'Q{question_count}. {original_text}')
            
            # Preserve original formatting if any
            for old_run in paragraph.runs[1:]:  # Skip the first run which we just added
                new_run = paragraph.add_run(old_run.text)
                # Copy formatting
                new_run.bold = old_run.bold
                new_run.italic = old_run.italic
                new_run.underline = old_run.underline
                if old_run.font.color.rgb:
                    new_run.font.color.rgb = old_run.font.color.rgb
    
    # Save as new document with '_numbered' suffix
    base_name = os.path.splitext(doc_path)[0]
    new_path = f"{base_name}_numbered.docx"
    doc.save(new_path)
    print(f"Added numbering to {question_count} questions.")
    return new_path

def process_document(doc_path):
    """
    Process the document to extract questions and answers based on text color.
    Returns a dictionary of question numbers and their answers.
    """
    # Load the document
    doc = docx.Document(doc_path)
    answers_dict = {}
    current_question = 0
    
    # Process each paragraph
    for paragraph in doc.paragraphs:
        text = paragraph.text.strip()
        if text.startswith('Q'):  # Changed to handle both 'Q.' and 'Q1.' format
            current_question += 1
            
        # Check for colored text in the paragraph
        for run in paragraph.runs:
            if run.font.color.rgb and text.strip():  # If text has color
                answers_dict[current_question] = text.strip()
                break
    
    return answers_dict

def create_answer_table(doc_path, answers):
    """
    Create a table at the end of the document with question numbers and answers.
    """
    # Load the document
    doc = docx.Document(doc_path)
    
    # Add page break
    doc.add_page_break()
    
    # Add heading for answer key
    doc.add_heading('Answer Key', level=1)
    
    # Create table
    table = doc.add_table(rows=len(answers) + 1, cols=2)
    
    # Add headers with formatting
    header_cells = table.rows[0].cells
    header_cells[0].text = 'Question Number'
    header_cells[1].text = 'Answer'
    
    # Make headers bold
    for cell in header_cells:
        for paragraph in cell.paragraphs:
            for run in paragraph.runs:
                run.bold = True
    
    # Add borders to all cells (basic border)
    for row in table.rows:
        for cell in row.cells:
            # Add minimal padding to cells
            for paragraph in cell.paragraphs:
                paragraph.paragraph_format.space_before = docx.shared.Pt(6)
                paragraph.paragraph_format.space_after = docx.shared.Pt(6)
    
    # Add data
    for i, (question, answer) in enumerate(answers.items(), 1):
        row_cells = table.rows[i].cells
        row_cells[0].text = str(question)
        row_cells[1].text = str(answer)
    
    # Save the document with a new name
    base_name = os.path.splitext(doc_path)[0]
    new_path = f"{base_name}_with_answers.docx"
    doc.save(new_path)
    return new_path

def main():
    """Main function to process the document."""
    try:
        # Mount Google Drive
        drive_path = mount_drive()
        print("Google Drive mounted successfully.")
        
        # Get filename from user
        filename = input("Enter the name of your document file (with .docx extension): ")
        file_path = os.path.join(drive_path, filename)
        
        # Check if file exists
        if not os.path.exists(file_path):
            print(f"Error: File '{filename}' not found in Google Drive root folder.")
            return
        
        # Ask user what they want to do
        print("\nWhat would you like to do?")
        print("1. Add question numbering only")
        print("2. Create answer table only")
        print("3. Both numbering and answer table")
        choice = input("Enter your choice (1, 2, or 3): ")
        
        if choice in ['1', '3']:
            print("\nAdding question numbering...")
            numbered_path = number_questions(file_path)
            print(f"Numbered document saved as: {os.path.basename(numbered_path)}")
            
            if choice == '3':
                file_path = numbered_path  # Use the numbered document for answer table
        
        if choice in ['2', '3']:
            print("\nProcessing document for answers...")
            answers = process_document(file_path)
            
            if answers:
                new_file_path = create_answer_table(file_path, answers)
                print(f"Answer table has been created successfully!")
                print(f"Processed {len(answers)} questions.")
                print(f"Final file saved as: {os.path.basename(new_file_path)}")
            else:
                print("No questions with colored answers found in the document.")
            
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
